# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_api.ipynb.

# %% auto 0
__all__ = ['cli']

# %% ../nbs/03_api.ipynb 2
import pandas as pd
import logging
from fastcore.all import *
from .collab import *
from pathlib import Path
from typing import Literal, Optional
from fastai.collab import CollabDataLoaders, to_device

# %% ../nbs/03_api.ipynb 3
@call_parse
def cli(optype, # operation to peroform, one of 'train', 'eval' or 'pred'
        r_path, # path to dataset with ratings
        m_path,  # path to dataset with movie titles
        model: Optional[Path]=None, # path to model if not train
        out: Path = './out.pkl'):  # path for output model, by default will save to './out.pkl'
    assert optype in ['train','eval','pred'], 'incorrect operation type'
    
    logging.info(f"loading datasets from {r_path} and {m_path}")
    df = read_movielens(r_path,m_path)
    logging.info(f"datasets loaded")
    
    dls = dataloaders(df)
    m = CollabUserBased()
    
    logging.info(f"start operation: {optype}")
    if optype=='train':
        train(m, dls, out)
        logging.info(f"model trained and saved to {out}")
   
    assert model is not None, 'model path must be not None'
    m.load(model)
    if optype=='eval':
        dls = dataloaders(df, bs=1024)
        loss = eval(m,dls.train)
        logging.info(f"loss = {loss.item()}")
    if optype=='pred':
        tdl = dls.test_dl(df[['userId','title']],bs=1024)
        preds = pred(m,tdl)
        logging.info(f"preds are saved to {out}")
        return preds
