# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_collab.ipynb.

# %% auto 0
__all__ = ['CollabUserBased']

# %% ../nbs/01_collab.ipynb 3
import torch, torch.nn.functional as F
from torch import tensor
from fastai.learner import to_device

# %% ../nbs/01_collab.ipynb 16
class CollabUserBased:
    def __init__(self, A, device=None): 
        self.A = A
        if not device: to_device(self.A)
    
    def predict(self, xb, yb=None,loss=F.mse_loss):
        u, m = xb.T
        ratings = torch.bmm((self.A[u] @ self.A.T)[:,None,:], self.A[:,m].T[...,None]).squeeze()/(self.A[u] @ self.A.T).sum(dim=1)
        if yb is not None: return (ratings, loss(ratings,yb[:,0]))
        return ratings

    def recommend(self, user:int, topk=3):
        return ((self.A @ self.A[user]) @ self.A).topk(topk)
